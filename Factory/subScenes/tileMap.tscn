[gd_scene load_steps=3 format=2]

[ext_resource path="res://resources/generatiorsTileSet.tres" type="TileSet" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends TileMap

var mouse
var loc
var actualCellNum

const loadedMachineNode = preload(\"res://subScenes/ironGenerator.tscn\")
var machineNode

var timer


func createCell(x : int, y: int, type: String, orientation: String):
	var typeID: int = getCellTypeID(type)
#	create the tile
	set_cell(x,y,typeID)
	var localID = global.assingID()
#	if the data is blank, write it to the first if not, 
#	append a new one
#	i must change this, it was only for testing purposes, i have to edit the reference data for the dictionary to be balnk and only append here
	if global.cells[0].id == null:
		global.cells[0] = {
			\"id\": localID,
			\"x\":x,
			\"y\":y,
			\"type\":type,
			\"orientation\":orientation	
		}
	else:
		global.cells.append({
			\"id\": localID,
			\"x\":x,
			\"y\":y,
			\"type\":type,
			\"orientation\":orientation	
		})

	
	#now we will create a scene instance to do the work int the game
	machineNode = loadedMachineNode.instance()
	get_tree().get_root().call_deferred(\"add_child\",machineNode)
	
	#add the new instance to a global list of instanced machines
	global.machines.append(machineNode)
	
	machineNode.id = localID
	machineNode.position = map_to_world(Vector2(x,y))
	machineNode.orientation = orientation
	
	#print(\"the cell in 0,0 is:\\n\" + str(global.findCell(Vector2(0,0))))



#remove cell and remove from the dictionary
func removeCell(x: int,y: int):
	var i: int = 0
	var c = global.cells[i]
	set_cell(x,y,-1)
	
	#takes the cell with coordenates (x,y) and stores it in c
	while not(c.x == x and c.y == y):
		i +=1
		c = global.cells[i]
		
	var n = 0
	var m = global.machines[n]
	while not(m.id == c.id):
		n +=1
		m = global.machines[n]
	
	get_tree().get_root().remove_child(m)
	
	#removes teh cell in (x,y) frm the global list
	global.cells.remove(i)
	if global.cells.empty():
		global.cells.append({
			\"id\": null,
			\"x\":null,
			\"y\":null,
			\"type\":null,
			\"orientation\":null
		})



# warning-ignore:unused_argument
func _input(event):
	mouse = get_viewport().get_mouse_position()
	loc = world_to_map(mouse)
	actualCellNum = get_cell(loc.x, loc.y)
	
	
	#I need to create tha table as expected and create a function to add and remove Cells from the table and then create an object to use on programing whose valuers are defined from tha table and a function to add it into the table.
	var L_click_pressed = Input.is_action_pressed(\"ui_select\")
	var there_is_no_cell_there = actualCellNum == -1
#	var the_machine_is_selected = get_tree().get_root().get_node(\"Main\").Machine1_BTN
	
	if L_click_pressed && there_is_no_cell_there: #&& the_machine_is_selected: #add tile selected 
			createCell(loc.x, loc.y, global.cellSelected, \"south\") #(x,y,type, orientation)
	elif Input.is_action_pressed(\"R_click\"):
		if actualCellNum != -1:
			removeCell(loc.x, loc.y)


 
func getCellTypeID(cellTypeString: String) -> int:
	var type : int
	match cellTypeString:
		\"ironGenerator\": type = 0
		\"rightConveyorBelt\": type = 1
	return type
"

[node name="TileMap" type="TileMap"]
tile_set = ExtResource( 1 )
cell_size = Vector2( 128, 128 )
format = 1
script = SubResource( 1 )
